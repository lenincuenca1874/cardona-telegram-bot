#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Env√≠a UN resumen diario al canal de Telegram:
‚Ä¢ Lista de s√≠mbolos con se√±ales encontradas (todas las estrategias)
‚Ä¢ Si no hay ninguna ‚Üí mensaje ‚Äúsin se√±ales v√°lidas‚Äù
"""

import os, datetime, requests, pandas as pd, telegram

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIGURACI√ìN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN   = os.environ["TELEGRAM_TOKEN"]
CHAT_ID = os.environ["TELEGRAM_CHAT_ID"]

SYMBOLS = [
    "SPY","QQQ","AAPL","META","AMZN","NFLX","TSLA","NVDA",
    "MRNA","BAC","TNA","GLD","SLV","USO","XOM","CVX"
]
TIMEZONE = "America/New_York"          # para estampar la hora en NY

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UTILIDADES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def yf_1d(sym: str) -> pd.DataFrame:
    """
    Devuelve un DataFrame con datos de 1-d√≠a (1 min) del s√≠mbolo `sym`.
    """
    url = ("https://query1.finance.yahoo.com/v8/finance/chart/"
           f"{sym}?interval=1m&range=1d")
    j = requests.get(url, timeout=20).json()
    ts  = j["chart"]["result"][0]["timestamp"]
    px  = j["chart"]["result"][0]["indicators"]["quote"][0]
    df  = pd.DataFrame(px, index=pd.to_datetime(ts, unit="s", utc=True))
    df  = df.tz_convert(TIMEZONE)
    return df

# Estrategias ‚ü∂ devuelven True/False (Serie booleana) + descripci√≥n breve
def e1(df):  # Primera vela roja de apertura (PUT)
    s = df["close"].between(df["open"], df["open"]*0.999)
    return s & (df.index.hour == 10)  # ‚âà vela 9:30-10

def e2(df):  # Ruptura piso del gap (PUT)
    gap_low = df["low"].iloc[0]
    return df["close"] < gap_low

def e3(df):  # Modelo 4 pasos (PUT, canal bajista)
    ma40 = df["close"].rolling(40).mean()
    top  = ma40 + ma40*0.01
    return (df["high"] > top) & (df["close"] < top)

def e4(df):  # H√°ngar en diario (PUT)
    o, h, l, c = [df[x].iloc[-1] for x in ("open","high","low","close")]
    body = abs(c-o)
    upper = h - max(c,o)
    return (upper > 2*body) and (c < o)       # cola alta + roja

STRATS = [
    (e1, "E1 ·¥ø·µí ≤·µÉ apertura (put)"),
    (e2, "E2 üîª Piso gap (put)"),
    (e3, "E3 üìâ 4-pasos (put)"),
    (e4, "E4 ü™£ Hangar diario (put)")
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FUNCI√ìN MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    hits = []

    for t in SYMBOLS:
        df = yf_1d(t)

        for func, name in STRATS:
            flag = func(df)

            # flag puede ser bool o Serie ‚Üí lo reducimos a bool
            if isinstance(flag, pd.Series):
                flag = bool(flag.iloc[-1])    # <-- CORRECCI√ìN CLAVE

            if flag:
                hits.append(f"‚Ä¢ {t}   {name}")

    # Mensaje final
    bot = telegram.Bot(TOKEN)
    today = datetime.date.today().strftime("%Y-%m-%d")

    if hits:
        text = ("üìã *Resumen diario* " + today +
                "\nSe√±ales encontradas:\n" + "\n".join(hits))
    else:
        text = f"üìã *{today}* ‚Äì sin se√±ales v√°lidas hoy"

    bot.send_message(CHAT_ID, text, parse_mode="Markdown")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    main()
